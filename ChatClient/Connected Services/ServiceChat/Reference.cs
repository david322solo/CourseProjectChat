//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(ChatClient.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        void Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(string LoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string LoginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Registration", ReplyAction="http://tempuri.org/IServiceChat/RegistrationResponse")]
        string Registration(string name, string surname, string login, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Registration", ReplyAction="http://tempuri.org/IServiceChat/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string name, string surname, string login, string password, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Authorization", ReplyAction="http://tempuri.org/IServiceChat/AuthorizationResponse")]
        string Authorization(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Authorization", ReplyAction="http://tempuri.org/IServiceChat/AuthorizationResponse")]
        System.Threading.Tasks.Task<string> AuthorizationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUser", ReplyAction="http://tempuri.org/IServiceChat/GetUserResponse")]
        wcf_chat.Users GetUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUser", ReplyAction="http://tempuri.org/IServiceChat/GetUserResponse")]
        System.Threading.Tasks.Task<wcf_chat.Users> GetUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsers", ReplyAction="http://tempuri.org/IServiceChat/GetUsersResponse")]
        wcf_chat.Users[] GetUsers(string searchArg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsers", ReplyAction="http://tempuri.org/IServiceChat/GetUsersResponse")]
        System.Threading.Tasks.Task<wcf_chat.Users[]> GetUsersAsync(string searchArg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetContacts", ReplyAction="http://tempuri.org/IServiceChat/GetContactsResponse")]
        wcf_chat.Contacts[] GetContacts(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetContacts", ReplyAction="http://tempuri.org/IServiceChat/GetContactsResponse")]
        System.Threading.Tasks.Task<wcf_chat.Contacts[]> GetContactsAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/ChangeInformationSetting", ReplyAction="http://tempuri.org/IServiceChat/ChangeInformationSettingResponse")]
        string ChangeInformationSetting(string LoginUser, string NewName, string NewSurname, string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/ChangeInformationSetting", ReplyAction="http://tempuri.org/IServiceChat/ChangeInformationSettingResponse")]
        System.Threading.Tasks.Task<string> ChangeInformationSettingAsync(string LoginUser, string NewName, string NewSurname, string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AddContacts", ReplyAction="http://tempuri.org/IServiceChat/AddContactsResponse")]
        string AddContacts(string LoginUser, string LoginUserContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/AddContacts", ReplyAction="http://tempuri.org/IServiceChat/AddContactsResponse")]
        System.Threading.Tasks.Task<string> AddContactsAsync(string LoginUser, string LoginUserContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/RemoveContacts", ReplyAction="http://tempuri.org/IServiceChat/RemoveContactsResponse")]
        void RemoveContacts(string LoginUser, string LoginUserContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/RemoveContacts", ReplyAction="http://tempuri.org/IServiceChat/RemoveContactsResponse")]
        System.Threading.Tasks.Task RemoveContactsAsync(string LoginUser, string LoginUserContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetAllMessage", ReplyAction="http://tempuri.org/IServiceChat/GetAllMessageResponse")]
        string[] GetAllMessage(string LoginUserFirst, string LoginUserSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetAllMessage", ReplyAction="http://tempuri.org/IServiceChat/GetAllMessageResponse")]
        System.Threading.Tasks.Task<string[]> GetAllMessageAsync(string LoginUserFirst, string LoginUserSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateConversation", ReplyAction="http://tempuri.org/IServiceChat/CreateConversationResponse")]
        void CreateConversation(string loginFirst, string loginSecond);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateConversation", ReplyAction="http://tempuri.org/IServiceChat/CreateConversationResponse")]
        System.Threading.Tasks.Task CreateConversationAsync(string loginFirst, string loginSecond);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(string msg, string LoginUserFirst, string LoginUserSecond);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, string LoginUserFirst, string LoginUserSecond);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ChatClient.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceChat.IServiceChat>, ChatClient.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string name) {
            base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(string LoginId) {
            base.Channel.Disconnect(LoginId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string LoginId) {
            return base.Channel.DisconnectAsync(LoginId);
        }
        
        public string Registration(string name, string surname, string login, string password, string phone) {
            return base.Channel.Registration(name, surname, login, password, phone);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string name, string surname, string login, string password, string phone) {
            return base.Channel.RegistrationAsync(name, surname, login, password, phone);
        }
        
        public string Authorization(string login, string password) {
            return base.Channel.Authorization(login, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizationAsync(string login, string password) {
            return base.Channel.AuthorizationAsync(login, password);
        }
        
        public wcf_chat.Users GetUser(string login) {
            return base.Channel.GetUser(login);
        }
        
        public System.Threading.Tasks.Task<wcf_chat.Users> GetUserAsync(string login) {
            return base.Channel.GetUserAsync(login);
        }
        
        public wcf_chat.Users[] GetUsers(string searchArg) {
            return base.Channel.GetUsers(searchArg);
        }
        
        public System.Threading.Tasks.Task<wcf_chat.Users[]> GetUsersAsync(string searchArg) {
            return base.Channel.GetUsersAsync(searchArg);
        }
        
        public wcf_chat.Contacts[] GetContacts(string login) {
            return base.Channel.GetContacts(login);
        }
        
        public System.Threading.Tasks.Task<wcf_chat.Contacts[]> GetContactsAsync(string login) {
            return base.Channel.GetContactsAsync(login);
        }
        
        public string ChangeInformationSetting(string LoginUser, string NewName, string NewSurname, string OldPassword, string NewPassword) {
            return base.Channel.ChangeInformationSetting(LoginUser, NewName, NewSurname, OldPassword, NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> ChangeInformationSettingAsync(string LoginUser, string NewName, string NewSurname, string OldPassword, string NewPassword) {
            return base.Channel.ChangeInformationSettingAsync(LoginUser, NewName, NewSurname, OldPassword, NewPassword);
        }
        
        public string AddContacts(string LoginUser, string LoginUserContact) {
            return base.Channel.AddContacts(LoginUser, LoginUserContact);
        }
        
        public System.Threading.Tasks.Task<string> AddContactsAsync(string LoginUser, string LoginUserContact) {
            return base.Channel.AddContactsAsync(LoginUser, LoginUserContact);
        }
        
        public void RemoveContacts(string LoginUser, string LoginUserContact) {
            base.Channel.RemoveContacts(LoginUser, LoginUserContact);
        }
        
        public System.Threading.Tasks.Task RemoveContactsAsync(string LoginUser, string LoginUserContact) {
            return base.Channel.RemoveContactsAsync(LoginUser, LoginUserContact);
        }
        
        public string[] GetAllMessage(string LoginUserFirst, string LoginUserSecond) {
            return base.Channel.GetAllMessage(LoginUserFirst, LoginUserSecond);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllMessageAsync(string LoginUserFirst, string LoginUserSecond) {
            return base.Channel.GetAllMessageAsync(LoginUserFirst, LoginUserSecond);
        }
        
        public void CreateConversation(string loginFirst, string loginSecond) {
            base.Channel.CreateConversation(loginFirst, loginSecond);
        }
        
        public System.Threading.Tasks.Task CreateConversationAsync(string loginFirst, string loginSecond) {
            return base.Channel.CreateConversationAsync(loginFirst, loginSecond);
        }
        
        public void SendMsg(string msg, string LoginUserFirst, string LoginUserSecond) {
            base.Channel.SendMsg(msg, LoginUserFirst, LoginUserSecond);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, string LoginUserFirst, string LoginUserSecond) {
            return base.Channel.SendMsgAsync(msg, LoginUserFirst, LoginUserSecond);
        }
    }
}
